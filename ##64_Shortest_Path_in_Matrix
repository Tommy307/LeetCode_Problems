Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

******************************************************这个算法在矩阵找最短路径中很常用******************************************************
#define min(a,b) a<b?a:b
class Solution {
public:
int minPathSum(vector<vector<int>>& grid) {
if(grid.size()==0) return 0;

    for(int i=1;i<grid.size();i++){
        grid[i][0]+=grid[i-1][0];
    }
    
     for(int i=1;i<grid[0].size();i++){
        grid[0][i]+=grid[0][i-1];
    }                                           //先将第一行和第一列依次加上上一位的值，这样就代表了平着&竖着从起点开始走的情况。
    
    for(int i=1;i<grid.size();i++){
        for(int j=1;j<grid[i].size();j++){                //然后从没走过的顶点开始遍历，然后贪心算法，每次都选择能到这一点的两个路径的较短路径。
            grid[i][j]+=min(grid[i-1][j],grid[i][j-1]);
        }
    }

    return grid[grid.size()-1][grid[0].size()-1]; 
    }
};
    
    ************************************在寻找所有不同路径的数目时，可将矩阵的第0列和第0行设置为1*******************************************
    *************************然后从第1列第1行开始按列遍历，每个位置可以到达的路径数就等于上方对角的两个位置的路径数的和************************

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

##solution：
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m<2||n<2) return 1;
        
        int board[m][n];            //用二维数组而不用vector可以节约大量内存,注意以变量为下标二维数组的初始化只能遍历。
        
        for(int i=1;i<n;++i){
            board[0][i]=1;
            for(int j=1;j<m;++j){
                board[j][0]=1;          //把第0行和第0列的初始化放在里面可以大大提高速度
                board[j][i]=(board[j-1][i]+board[j][i-1]);
            }
        }
        return board[m-1][n-1];
    }
};
